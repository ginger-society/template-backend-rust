// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use chrono::offset::Utc;
use chrono::DateTime;
use chrono::NaiveDate;
#[derive(Queryable, Debug, Identifiable)]
pub struct Administrator {
    pub id: i64,
    pub password: String,
    pub last_login: Option<DateTime<Utc>>,
    pub name: String,
    pub mobile: Option<String>,
    pub email: String,
    pub is_active: bool,
    pub is_staff: bool,
    pub is_admin: bool,
    pub password_change_required: bool,
    pub next_password_change_due: Option<NaiveDate>,
    pub tenant_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AuthGroup {
    pub id: i32,
    pub name: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AuthGroupPermission {
    pub id: i64,
    pub group_id: i32,
    pub permission_id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AuthPermission {
    pub id: i32,
    pub name: String,
    pub content_type_id: i32,
    pub codename: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Book {
    pub id: i32,
    pub title: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Component {
    pub id: i64,
    pub src: String,
    pub name: String,
    pub description: String,
    pub template_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DBNamespace {
    pub id: i64,
    pub name: String,
    pub host_env_var_name: String,
    pub port_env_var_name: String,
    pub username_env_var_name: String,
    pub password_env_var_name: String,
    pub tenant_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoAdminLog {
    pub id: i32,
    pub action_time: DateTime<Utc>,
    pub object_id: Option<String>,
    pub object_repr: String,
    pub action_flag: i16,
    pub change_message: String,
    pub content_type_id: Option<i32>,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoContentType {
    pub id: i32,
    pub app_label: String,
    pub model: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoMigration {
    pub id: i64,
    pub app: String,
    pub name: String,
    pub applied: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(session_key))]
pub struct DjangoSession {
    pub session_key: String,
    pub session_data: String,
    pub expire_date: DateTime<Utc>,
}

#[derive(Queryable, Debug)]
pub struct Invitation {
    pub id: i64,
    pub code: String,
    pub expiry: NaiveDate,
    pub invited_by_id: i64,
    pub tenant_id: i64,
    pub user_created_id: Option<i64>,
    pub is_staff: bool,
}

#[derive(Queryable, Debug)]
pub struct LanguagePack {
    pub id: i64,
    pub lang: String,
}

#[derive(Queryable, Debug)]
pub struct Many2ManyTest {
    pub id: i64,
    pub name: String,
}

#[derive(Queryable, Debug)]
pub struct Many2ManyTestCrossAppModel {
    pub id: i64,
    pub many2manytest_id: i64,
    pub testappmodel1_id: i64,
}

#[derive(Queryable, Debug)]
pub struct Many2ManyTestTestModel {
    pub id: i64,
    pub many2manytest_id: i64,
    pub test_id: i64,
}

#[derive(Queryable, Debug)]
pub struct PackageVersion {
    pub id: i64,
    pub identifier: String,
    pub minimum_version: String,
    pub latest_version: String,
    pub allow_older_version: bool,
    pub tenant_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct Page {
    pub id: i32,
    pub page_number: i32,
    pub content: String,
    pub book_id: i32,
    pub parent_id: i32,
}

#[derive(Queryable, Debug)]
pub struct ServiceMetadata {
    pub id: i64,
    pub prod_url: String,
    pub prod_schema_url: String,
    pub stage_url: String,
    pub stage_schema_url: String,
    pub auth_token_env_key: String,
    pub tenant_id: i64,
    pub name: String,
}

#[derive(Queryable, Debug)]
pub struct Template {
    pub id: i64,
    pub kind: String,
    pub name: String,
    pub src: String,
    pub pack_id: i64,
    pub version: String,
}

#[derive(Queryable, Debug)]
pub struct Tenant {
    pub id: i64,
    pub name: String,
    pub is_active: bool,
    pub expiry_date: Option<NaiveDate>,
}

#[derive(Queryable, Debug)]
pub struct Test {
    pub id: i64,
    pub choice_field: Option<String>,
    pub bool_field: bool,
    pub char_field: Option<String>,
    pub positive_integer_field: i32,
    pub field3: bool,
}

#[derive(Queryable, Debug)]
pub struct TestAppModel1 {
    pub id: i64,
    pub char_field: String,
}
